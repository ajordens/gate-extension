buildscript {
  repositories {
    maven { url "http://dl.bintray.com/spinnaker/gradle" }
    jcenter()
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.8.RELEASE"
    classpath('com.netflix.spinnaker.gradle:spinnaker-gradle-project:3.5.0') { transitive = false }
    classpath 'org.yaml:snakeyaml:1.16'
    classpath 'com.netflix.nebula:nebula-release-plugin:4.1.0'
    classpath "com.netflix.nebula:gradle-ospackage-plugin:4.0.0"
  }
}

ext {
  gateVersion = "2.77.0"
  netflixplatformVersion = "1.42.0"
  spinnakerDependenciesVersion = "0.51.0"
}

allprojects { project ->
  repositories {
    if ([gateVersion, netflixplatformVersion, spinnakerDependenciesVersion].find { it.endsWith('-SNAPSHOT') }) {
      mavenLocal()
    }
    maven { url 'http://dl.bintray.com/spinnaker/spinnaker/' }
    maven { url 'https://repo.spring.io/libs-snapshot' }
    jcenter()
  }

  apply plugin: 'spinnaker.ideaconfig'
  apply plugin: 'spinnaker.dependency'
  spinnaker {
    dependenciesVersion = spinnakerDependenciesVersion
  }

  // apply plugin: 'nebula'
  apply plugin: 'nebula.nebula-release'
  apply plugin: 'groovy'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  configurations.all {
    exclude group: 'javax.servlet', module: 'servlet-api'
    exclude group: 'javax.servlet', module: 'javax.servlet-api'
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-data-rest'
    resolutionStrategy {
      force 'org.codehaus.groovy:groovy-all:2.4.5'
      force 'org.spockframework:spock-core:1.0-groovy-2.4'
      eachDependency {
        if (it.requested.group == 'org.springframework.boot') {
          it.useVersion '1.2.8.RELEASE'
        }
        if (it.requested.group == 'org.springframework') {
          it.useVersion '4.1.9.RELEASE'
        }
      }
    }
  }

  group = "com.netflix.spinnaker.gate.internal"
}
